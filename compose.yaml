services:

  postgresql:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - application

  liquibase-migrations-passenger:
    image: liquibase/liquibase:4.25
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/passenger_service
      - --username=${DB_USERNAME}
      - --password=${DB_PASSWORD}
      - update
    volumes:
      - ./passenger-service/migrations:/liquibase/changelog
    networks:
      - application

  liquibase-migrations-driver:
    image: liquibase/liquibase:4.25
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/driver_service
      - --username=${DB_USERNAME}
      - --password=${DB_PASSWORD}
      - update
    volumes:
      - ./driver-service/migrations:/liquibase/changelog
    networks:
      - application

  liquibase-migrations-rides:
    image: liquibase/liquibase:4.25
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/rides_service
      - --username=${DB_USERNAME}
      - --password=${DB_PASSWORD}
      - update
    volumes:
      - ./rides-service/migrations:/liquibase/changelog
    networks:
      - application

  liquibase-migrations-reviews:
    image: liquibase/liquibase:4.25
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/review_service
      - --username=${DB_USERNAME}
      - --password=${DB_PASSWORD}
      - update
    volumes:
      - ./review-service/migrations:/liquibase/changelog
    networks:
      - application

  liquibase-migrations-wallets:
    image: liquibase/liquibase:4.25
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/wallet_service
      - --username=${DB_USERNAME}
      - --password=${DB_PASSWORD}
      - update
    volumes:
      - ./wallet-service/migrations:/liquibase/changelog
    networks:
      - application

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - application

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - application

  artemis-mq:
    image: apache/activemq-artemis:2.41.0-alpine
    ports:
      - "8161:8161"
      - "61616:61616"
    environment:
      ANONYMOUS_LOGIN: true
    networks:
      - application

  driver-service:
    container_name: driver-service
    ports:
      - "8083:8083"
    build:
      context: ./driver-service
      dockerfile: Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
      artemis-mq:
        condition: service_started
    env_file:
      - ./driver-service/.env
    networks:
      - application

  passenger-service:
    container_name: passenger-service
    ports:
      - "8082:8082"
    build:
      context: ./passenger-service
      dockerfile: Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_started
    env_file:
      - ./passenger-service/.env
    networks:
      - application

  review-service:
    container_name: review-service
    ports:
      - "8084:8084"
    build:
      context: ./review-service
      dockerfile: Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_started
      artemis-mq:
        condition: service_started
    env_file:
      - ./review-service/.env
    networks:
      - application

  ride-service:
    container_name: ride-service
    ports:
      - "8085:8085"
    build:
      context: ./rides-service
      dockerfile: Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
    env_file:
      - ./rides-service/.env
    networks:
      - application

  wallet-service:
    container_name: wallet-service
    ports:
      - "8086:8086"
    build:
      context: ./wallet-service
      dockerfile: Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
    env_file:
      - ./wallet-service/.env
    networks:
      - application

  gateway-service:
    container_name: gateway-service
    ports:
      - "8081:8081"
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    depends_on:
      eureka-server:
        condition: service_started
    env_file:
      - ./gateway-service/.env
    networks:
      - application

  eureka-server:
    container_name: eureka-server
    ports:
      - "8761:8761"
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    networks:
      - application

  prometheus:
    image: prom/prometheus:v3.4.1
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - application
      - monitoring

  grafana:
    image: grafana/grafana:12.0.1
    depends_on:
      prometheus:
        condition: service_started
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    networks:
      - application
      - monitoring

  zipkin:
    image: openzipkin/zipkin:3
    ports:
      - "9411:9411"
    networks:
      - application
      - monitoring

  elasticsearch:
    image: elasticsearch:8.12.0
    ports:
      - "9200:9200"
    depends_on:
      logstash:
        condition: service_started
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    networks:
      - monitoring
      - application

  logstash:
    image: logstash:8.12.0
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5050:5050"
    environment:
      - 'LS_JAVA_OPTS=-Xmx256m -Xms256m'
    networks:
      - monitoring
      - application

  kibana:
    image: kibana:8.12.0
    depends_on:
      elasticsearch:
        condition: service_started
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - monitoring
      - application

  keycloak:
    image: keycloak/keycloak:26.2
    ports:
      - "8180:8080"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgresql
      DB_DATABASE: keycloak_db
      DB_SCHEMA: public
      DB_USER: postgres
      DB_PASSWORD: root
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: root
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    volumes:
      - type: bind
        source: ./keycloak/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
        read_only: true
    command:
      - start-dev
      - --import-realm
    networks:
      application:

networks:
  application:
  monitoring:
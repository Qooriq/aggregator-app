spring:
  application:
    name: passenger-service
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/passenger_service}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:root}
  liquibase:
    enabled: false
  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    consumer:
      group-id: passenger-group
    properties:
      security.protocol: PLAINTEXT
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8180/realms/agregator-app
          jwk-set-uri: http://localhost:8180/realms/agregator-app/protocol/openid-connect/certs
passenger-service:
  topic-name-passenger: passenger-review-update
  kafka:
    partitions: 3
    replicas: 1
  resilience4j:
    failure-rate: 50
    duration-in-open-state: 10000
    sliding-window-size: 10
server:
  port: ${PORT:8082}
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}
management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
    propagation:
      produce: b3
      consume: b3
    enabled: true
  zipkin:
    tracing:
      export:
        enabled: true
      endpoint: http://localhost:9411/api/v2/spans